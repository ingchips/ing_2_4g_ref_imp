<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\BLE_2P4G_Switch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\BLE_2P4G_Switch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Dec 12 15:03:05 2023
<BR><P>
<H3>Maximum Stack Usage =        436 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
user_packet_handler &rArr; ble_adv_set_complete_handler &rArr; ble_adv_stopped_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">EventIrqCallBack</a> from test_2p4g.o(.text.EventIrqCallBack) referenced 2 times from test_2p4g.o(.text.ing24g_test_init)
 <LI><a href="#[1]">Override_Handler</a> from startup_ing91600.o(.text) referenced 65 times from startup_ing91600.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[9]">RxPktIrqCallBack</a> from test_2p4g.o(.text.RxPktIrqCallBack) referenced 2 times from test_2p4g.o(.text.ing24g_test_init)
 <LI><a href="#[a]">TxPktIrqCallBack</a> from test_2p4g.o(.text.TxPktIrqCallBack) referenced 2 times from test_2p4g.o(.text.ing24g_test_init)
 <LI><a href="#[4]">UserHandler</a> from ing_2p4g.o(.text.UserHandler) referenced from startup_ing91600.o(.text)
 <LI><a href="#[3]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[5]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[c]">att_read_callback</a> from profile.o(.text.att_read_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[d]">att_write_callback</a> from profile.o(.text.att_write_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[16]">cb_assertion</a> from main.o(.text.cb_assertion) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[15]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[18]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[11]">cb_putc</a> from main.o(.text.cb_putc) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[19]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[20]">cmd_access_address_set</a> from uart_console.o(.text.cmd_access_address_set) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[22]">cmd_channel_set</a> from uart_console.o(.text.cmd_channel_set) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[2b]">cmd_event_interrupt_clear</a> from uart_console.o(.text.cmd_event_interrupt_clear) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[1d]">cmd_get_2g4_state</a> from uart_console.o(.text.cmd_get_2g4_state) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[1e]">cmd_get_2g4_work_mode</a> from uart_console.o(.text.cmd_get_2g4_work_mode) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[1a]">cmd_help</a> from uart_console.o(.text.cmd_help) referenced 2 times from uart_console.o(.data.cmds)
 <LI><a href="#[1f]">cmd_phy_set</a> from uart_console.o(.text.cmd_phy_set) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[21]">cmd_power_set</a> from uart_console.o(.text.cmd_power_set) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[26]">cmd_rx_continus</a> from uart_console.o(.text.cmd_rx_continus) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[29]">cmd_rx_data_get</a> from uart_console.o(.text.cmd_rx_data_get) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[2a]">cmd_rx_interrupt_clear</a> from uart_console.o(.text.cmd_rx_interrupt_clear) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[25]">cmd_rx_one_packet</a> from uart_console.o(.text.cmd_rx_one_packet) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[28]">cmd_rx_timeout_set</a> from uart_console.o(.text.cmd_rx_timeout_set) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[2d]">cmd_shutdown</a> from uart_console.o(.text.cmd_shutdown) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[27]">cmd_stop_continus</a> from uart_console.o(.text.cmd_stop_continus) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[1c]">cmd_switch_to_2g4</a> from uart_console.o(.text.cmd_switch_to_2g4) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[1b]">cmd_switch_to_ble</a> from uart_console.o(.text.cmd_switch_to_ble) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[2c]">cmd_test_inst</a> from uart_console.o(.text.cmd_test_inst) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[24]">cmd_tx_continus</a> from uart_console.o(.text.cmd_tx_continus) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[23]">cmd_tx_one_packet</a> from uart_console.o(.text.cmd_tx_one_packet) referenced from uart_console.o(.data.cmds)
 <LI><a href="#[f]">console_task_entry</a> from uart_console.o(.text.console_task_entry) referenced 2 times from uart_console.o(.text.uart_console_start)
 <LI><a href="#[10]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6]">gpio_isr</a> from main.o(.text.gpio_isr) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[b]">ing24g_test_switch_mode_callback</a> from test_2p4g.o(.text.ing24g_test_switch_mode_callback) referenced 2 times from test_2p4g.o(.text.ing24g_test_switch_mode_trigger)
 <LI><a href="#[2]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[13]">on_deep_sleep_wakeup</a> from main.o(.text.on_deep_sleep_wakeup) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[17]">on_lle_init</a> from main.o(.text.on_lle_init) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[14]">query_deep_sleep_allowed</a> from main.o(.text.query_deep_sleep_allowed) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[12]">setup_profile</a> from profile.o(.text.setup_profile) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[7]">uart_isr</a> from main.o(.text.uart_isr) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[e]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c7]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[c9]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[d1]"></a>att_set_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[b9]"></a>btstack_push_user_runnable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_trigger
</UL>

<P><STRONG><a name="[bc]"></a>btstack_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_BLE
</UL>

<P><STRONG><a name="[89]"></a>gap_disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconn_trigger
</UL>

<P><STRONG><a name="[c1]"></a>gap_set_adv_set_random_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[c3]"></a>gap_set_ext_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[80]"></a>gap_set_ext_adv_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>

<P><STRONG><a name="[c2]"></a>gap_set_ext_adv_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[c4]"></a>gap_set_ext_scan_response_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[c8]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[ba]"></a>ll_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_malloc_cont_mem
</UL>

<P><STRONG><a name="[78]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_soc_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[97]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task_entry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_start
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_rx_data
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[5c]"></a>platform_get_us_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percent_cnt
</UL>

<P><STRONG><a name="[82]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_one_packet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_continus
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_continus
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shutdown
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_timeout_set
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_one_packet
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_interrupt_clear
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_data_get
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_power_set
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_phy_set
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_2g4_work_mode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_2g4_state
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_event_interrupt_clear
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_channel_set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_access_address_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percent_cnt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_ble_trigger
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_ble_mode_complete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_reset_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_startted_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set_complete_handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_deep_sleep_wakeup
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
</UL>

<P><STRONG><a name="[75]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[79]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[a2]"></a>platform_shutdown</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shutdown
</UL>

<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[dd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[de]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[df]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[30]"></a>LLE_RF_INI</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEInit
</UL>

<P><STRONG><a name="[34]"></a>LLE_SPI_WRITE</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LLE_SPI_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_channel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_stop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEInit
</UL>

<P><STRONG><a name="[33]"></a>LLEInit</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_lle_init
</UL>

<P><STRONG><a name="[35]"></a>SetCont</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetCont
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
</UL>

<P><STRONG><a name="[38]"></a>CalTime</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEvent
</UL>

<P><STRONG><a name="[37]"></a>StartEvent</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
</UL>

<P><STRONG><a name="[39]"></a>ing2p4g_start_2p4g_tx</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ing2p4g_start_2p4g_tx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCont
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_one_packet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_continus
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_handler
</UL>

<P><STRONG><a name="[3a]"></a>ing2p4g_lle_init</STRONG> (Thumb, 176 bytes, Stack size 272 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[e3]"></a>ing2p4g_lle_rst</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, ing_2p4g.o(.ram_code), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_rx_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCont
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
</UL>

<P><STRONG><a name="[d5]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[71]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[3f]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percent_cnt
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e8]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ea]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[eb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[43]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>GIO_ClearAllIntStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peripheral_gpio.o(.text.GIO_ClearAllIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[4f]"></a>GIO_ConfigIntSource</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, peripheral_gpio.o(.text.GIO_ConfigIntSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_int_mode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[c6]"></a>GIO_DebounceCtrl</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, peripheral_gpio.o(.text.GIO_DebounceCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIO_DebounceCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[52]"></a>GIO_DebounceEn</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, peripheral_gpio.o(.text.GIO_DebounceEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GIO_DebounceEn &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[53]"></a>GIO_EnableRetentionGroupA</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_EnableRetentionGroupA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_EnableRetentionGroupA &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_deep_sleep_allowed
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_deep_sleep_wakeup
</UL>

<P><STRONG><a name="[54]"></a>GIO_EnableRetentionGroupB</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_EnableRetentionGroupB))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_EnableRetentionGroupB &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shutdown
</UL>

<P><STRONG><a name="[55]"></a>GIO_SetDirection</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[56]"></a>Initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ing_2p4g.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Initialize &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[5d]"></a>LLE_SPI_READ</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, ing_2p4g.o(.text.LLE_SPI_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LLE_SPI_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
</UL>

<P><STRONG><a name="[c5]"></a>PINCTRL_Pull</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[58]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[5b]"></a>RSSI_LISTEN</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, ing_2p4g.o(.text.RSSI_LISTEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RSSI_LISTEN &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test_inst
</UL>

<P><STRONG><a name="[5f]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[61]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[63]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[64]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[67]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[69]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[6b]"></a>SYSCTRL_Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[6e]"></a>SYSCTRL_SetLDOOutput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetLDOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_SetLDOOutput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[96]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[4]"></a>UserHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ing_2p4g.o(.text.UserHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UserHandler &rArr; mode_2p4_ble_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_2p4_ble_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[cc]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[95]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[cb]"></a>apUART_Get_all_raw_int_stat</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Get_all_raw_int_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Get_all_raw_int_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[72]"></a>apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[5]"></a>app_main</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_init_dual_mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_soc_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>ble_switch_to_2p4g_trigger</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, profile.o(.text.ble_switch_to_2p4g_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ble_switch_to_2p4g_trigger &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing_ble_2p4g_state_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconn_trigger
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_callback
</UL>

<P><STRONG><a name="[11]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[19]"></a>cb_trace_rtt</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[20]"></a>cmd_access_address_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_access_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_access_address_set &rArr; ing2p4g_set_access_address
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_access_address
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[22]"></a>cmd_channel_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cmd_channel_set &rArr; ing2p4g_set_channel &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_channel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[2b]"></a>cmd_event_interrupt_clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_event_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cmd_event_interrupt_clear &rArr; ing2p4g_clear_event_int
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_event_int
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1d]"></a>cmd_get_2g4_state</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uart_console.o(.text.cmd_get_2g4_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_get_2g4_state &rArr; ing2p4g_get_state
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_state
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1e]"></a>cmd_get_2g4_work_mode</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uart_console.o(.text.cmd_get_2g4_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_get_2g4_work_mode &rArr; ing2p4g_get_2g4_work_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_2g4_work_mode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1a]"></a>cmd_help</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1f]"></a>cmd_phy_set</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_phy_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmd_phy_set &rArr; ing2p4g_set_phy &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_phy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[21]"></a>cmd_power_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_power_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cmd_power_set &rArr; ing2p4g_set_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_tx_power
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[26]"></a>cmd_rx_continus</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_rx_continus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cmd_rx_continus &rArr; ing2p4g_start_2p4g_rx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_2g4_work_mode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continus_2g4_txrx_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continus_2g4_txrx_off
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[29]"></a>cmd_rx_data_get</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_rx_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_rx_data_get &rArr; ing2p4g_get_rx_data
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_rx_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[2a]"></a>cmd_rx_interrupt_clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_rx_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cmd_rx_interrupt_clear &rArr; ing2p4g_clear_rx_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_rx_int
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[25]"></a>cmd_rx_one_packet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_rx_one_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cmd_rx_one_packet &rArr; ing2p4g_start_2p4g_rx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_2g4_work_mode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[28]"></a>cmd_rx_timeout_set</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_rx_timeout_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_rx_timeout_set &rArr; ing2p4g_set_rx_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_rx_timeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[2d]"></a>cmd_shutdown</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cmd_shutdown &rArr; GIO_EnableRetentionGroupB &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_shutdown
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[27]"></a>cmd_stop_continus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_stop_continus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_stop_continus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continus_2g4_txrx_off
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing_ble_2p4g_state_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1c]"></a>cmd_switch_to_2g4</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_switch_to_2g4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_switch_to_2g4 &rArr; ing24g_test_switch_mode_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1b]"></a>cmd_switch_to_ble</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_switch_to_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_switch_to_ble &rArr; ing24g_test_switch_mode_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_trigger
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continus_2g4_txrx_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[2c]"></a>cmd_test_inst</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, uart_console.o(.text.cmd_test_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cmd_test_inst &rArr; RSSI_LISTEN &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[24]"></a>cmd_tx_continus</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_tx_continus))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cmd_tx_continus &rArr; ing2p4g_start_2p4g_tx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_2g4_work_mode
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continus_2g4_txrx_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continus_2g4_txrx_off
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[23]"></a>cmd_tx_one_packet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_tx_one_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cmd_tx_one_packet &rArr; ing2p4g_start_2p4g_tx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_2g4_work_mode
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.data.cmds)
</UL>
<P><STRONG><a name="[a4]"></a>comm_2p4g_start</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ing_2p4g.o(.text.comm_2p4g_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_malloc_cont_mem
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_lle_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
</UL>

<P><STRONG><a name="[a7]"></a>comm_2p4g_stop</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ing_2p4g.o(.text.comm_2p4g_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = comm_2p4g_stop &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_BLE
</UL>

<P><STRONG><a name="[a8]"></a>config_uart</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[a9]"></a>console_rx_data</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, uart_console.o(.text.console_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = console_rx_data &rArr; append_data
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[a0]"></a>continus_2g4_txrx_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_2p4g.o(.text.continus_2g4_txrx_off))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_continus
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_switch_to_ble
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_continus
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
</UL>

<P><STRONG><a name="[9f]"></a>continus_2g4_txrx_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_2p4g.o(.text.continus_2g4_txrx_on))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_continus
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
</UL>

<P><STRONG><a name="[be]"></a>cube_on_lle_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.cube_on_lle_init))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_lle_init
</UL>

<P><STRONG><a name="[74]"></a>cube_soc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text.cube_soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cube_soc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[ae]"></a>erase_flash_sector</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eflash.o(.text.erase_flash_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[6c]"></a>flash_get_factory_calib_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eflash.o(.text.flash_get_factory_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[b0]"></a>flash_prepare_factory_data</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, eflash.o(.text.flash_prepare_factory_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>

<P><STRONG><a name="[10]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[6]"></a>gpio_isr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text.gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gpio_isr &rArr; ing24g_test_switch_mode_handler &rArr; ing2p4g_start_2p4g_tx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ClearAllIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[aa]"></a>handle_command</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, uart_console.o(.text.handle_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task_entry
</UL>

<P><STRONG><a name="[8d]"></a>ing24g_test_do_switch_to_2p4g</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, test_2p4g.o(.text.ing24g_test_do_switch_to_2p4g))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
</UL>

<P><STRONG><a name="[93]"></a>ing24g_test_do_switch_to_BLE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, test_2p4g.o(.text.ing24g_test_do_switch_to_BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ing24g_test_do_switch_to_BLE &rArr; ing2p4g_switch_to_BLE &rArr; comm_2p4g_stop &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_BLE
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_ble_mode_start
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_ble_trigger
</UL>

<P><STRONG><a name="[7c]"></a>ing24g_test_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, test_2p4g.o(.text.ing24g_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ing24g_test_init &rArr; ing2p4g_set_irq_callback &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing_2p4g_config_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_irq_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[b]"></a>ing24g_test_switch_mode_callback</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, test_2p4g.o(.text.ing24g_test_switch_mode_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ing24g_test_switch_mode_callback &rArr; ble_switch_to_2p4g_trigger &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_ble_trigger
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_2p4g.o(.text.ing24g_test_switch_mode_trigger)
</UL>
<P><STRONG><a name="[b3]"></a>ing24g_test_switch_mode_handler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, test_2p4g.o(.text.ing24g_test_switch_mode_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ing24g_test_switch_mode_handler &rArr; ing2p4g_start_2p4g_tx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_2g4_work_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_trigger
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[94]"></a>ing24g_test_switch_mode_trigger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_2p4g.o(.text.ing24g_test_switch_mode_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ing24g_test_switch_mode_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_runnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_switch_to_ble
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_switch_to_2g4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_ble_trigger
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_handler
</UL>

<P><STRONG><a name="[4a]"></a>ing2p4g_clear_event_int</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_clear_event_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_clear_event_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_event_interrupt_clear
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[5e]"></a>ing2p4g_clear_rx_int</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_clear_rx_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_clear_rx_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_interrupt_clear
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPktIrqCallBack
</UL>

<P><STRONG><a name="[6f]"></a>ing2p4g_clear_tx_int</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_clear_tx_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_clear_tx_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxPktIrqCallBack
</UL>

<P><STRONG><a name="[4b]"></a>ing2p4g_get_2g4_work_mode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_get_2g4_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_get_2g4_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_2g4_work_mode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_handler
</UL>

<P><STRONG><a name="[4c]"></a>ing2p4g_get_rx_data</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, ing_2p4g.o(.text.ing2p4g_get_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ing2p4g_get_rx_data
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_data_get
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[92]"></a>ing2p4g_get_state</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_2g4_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_ble_trigger
</UL>

<P><STRONG><a name="[7a]"></a>ing2p4g_init_dual_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_init_dual_mode))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[bb]"></a>ing2p4g_lle_set_parameter</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_lle_set_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_lle_set_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
</UL>

<P><STRONG><a name="[a5]"></a>ing2p4g_malloc_cont_mem</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_malloc_cont_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_malloc_cont_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[9e]"></a>ing2p4g_set_2g4_work_mode</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_set_2g4_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_set_2g4_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_one_packet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tx_continus
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_one_packet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
</UL>

<P><STRONG><a name="[98]"></a>ing2p4g_set_access_address</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_set_access_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_set_access_address
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_access_address_set
</UL>

<P><STRONG><a name="[99]"></a>ing2p4g_set_channel</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ing_2p4g.o(.text.ing2p4g_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ing2p4g_set_channel &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_channel_set
</UL>

<P><STRONG><a name="[b7]"></a>ing2p4g_set_irq_callback</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ing_2p4g.o(.text.ing2p4g_set_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ing2p4g_set_irq_callback &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_init
</UL>

<P><STRONG><a name="[9c]"></a>ing2p4g_set_phy</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, ing_2p4g.o(.text.ing2p4g_set_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ing2p4g_set_phy &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_phy_set
</UL>

<P><STRONG><a name="[a1]"></a>ing2p4g_set_rx_timeout</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_set_rx_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_set_rx_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_timeout_set
</UL>

<P><STRONG><a name="[9d]"></a>ing2p4g_set_tx_power</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_set_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_power_set
</UL>

<P><STRONG><a name="[4e]"></a>ing2p4g_start_2p4g_rx</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ing_2p4g.o(.text.ing2p4g_start_2p4g_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ing2p4g_start_2p4g_rx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCont
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_one_packet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_handler
</UL>

<P><STRONG><a name="[b4]"></a>ing2p4g_switch_to_2G4</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ing_2p4g.o(.text.ing2p4g_switch_to_2G4))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_lle_set_parameter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
</UL>

<P><STRONG><a name="[b6]"></a>ing2p4g_switch_to_BLE</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ing_2p4g.o(.text.ing2p4g_switch_to_BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ing2p4g_switch_to_BLE &rArr; comm_2p4g_stop &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_BLE
</UL>

<P><STRONG><a name="[b5]"></a>ing2p4g_switch_to_ble_mode_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, profile.o(.text.ing2p4g_switch_to_ble_mode_start))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_BLE
</UL>

<P><STRONG><a name="[b8]"></a>ing_2p4g_config_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, test_2p4g.o(.text.ing_2p4g_config_init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_init
</UL>

<P><STRONG><a name="[8f]"></a>ing_ble_2p4g_state_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing_ble_2p4g_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_continus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
</UL>

<P><STRONG><a name="[70]"></a>mode_2p4_ble_isr</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ing_2p4g.o(.text.mode_2p4_ble_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mode_2p4_ble_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserHandler
</UL>

<P><STRONG><a name="[13]"></a>on_deep_sleep_wakeup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text.on_deep_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_deep_sleep_wakeup &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[17]"></a>on_lle_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(.text.on_lle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_lle_init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_on_lle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[af]"></a>program_flash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, eflash.o(.text.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>

<P><STRONG><a name="[14]"></a>query_deep_sleep_allowed</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, main.o(.text.query_deep_sleep_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = query_deep_sleep_allowed &rArr; GIO_EnableRetentionGroupA &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[ac]"></a>read_flash_security</STRONG> (Thumb, 80 bytes, Stack size 104 bytes, eflash.o(.text.read_flash_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_page_read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[76]"></a>setup_peripherals</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_DebounceEn
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_DebounceCtrl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_deep_sleep_wakeup
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[12]"></a>setup_profile</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_profile
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[77]"></a>trace_rtt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[7b]"></a>uart_console_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart_console.o(.text.uart_console_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_console_start
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[7]"></a>uart_isr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_isr &rArr; console_rx_data &rArr; append_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_rx_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[ad]"></a>write_flash</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, eflash.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash0
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[d4]"></a>write_flash0</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, eflash.o(.text.write_flash0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[d6]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ed]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ee]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_phy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test_inst
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_irq_callback
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ca]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[15]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[18]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[c]"></a>att_read_callback</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, profile.o(.text.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_read_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[d]"></a>att_write_callback</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, profile.o(.text.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = att_write_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[7e]"></a>ble_adv_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, profile.o(.text.ble_adv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_adv_set &rArr; ble_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
</UL>

<P><STRONG><a name="[81]"></a>ble_adv_set_complete_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_set_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ble_adv_set_complete_handler &rArr; ble_adv_stopped_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_startted_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[84]"></a>ble_adv_startted_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_startted_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_adv_startted_handler &rArr; ble_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set_complete_handler
</UL>

<P><STRONG><a name="[83]"></a>ble_adv_stopped_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_stopped_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ble_adv_stopped_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set_complete_handler
</UL>

<P><STRONG><a name="[87]"></a>ble_connect_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, profile.o(.text.ble_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_connect_handler &rArr; ble_disconn_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconn_trigger
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[88]"></a>ble_disconn_trigger</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, profile.o(.text.ble_disconn_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_disconn_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_handler
</UL>

<P><STRONG><a name="[8a]"></a>ble_disconnect_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, profile.o(.text.ble_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ble_disconnect_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[8b]"></a>ble_hci_reset_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, profile.o(.text.ble_hci_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ble_hci_reset_handler &rArr; ing2p4g_switch_to_ble_mode_complete &rArr; setup_adv &rArr; ble_adv_set &rArr; ble_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_ble_mode_complete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[85]"></a>ble_status_clear</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, profile.o(.text.ble_status_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_status_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
</UL>

<P><STRONG><a name="[90]"></a>ble_status_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, profile.o(.text.ble_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_trigger
</UL>

<P><STRONG><a name="[7f]"></a>ble_status_set</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, profile.o(.text.ble_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_startted_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>

<P><STRONG><a name="[86]"></a>ble_switch_to_2p4g_check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, profile.o(.text.ble_switch_to_2p4g_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
</UL>

<P><STRONG><a name="[ce]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[cf]"></a>hci_event_command_complete_get_command_opcode</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, profile.o(.text.hci_event_command_complete_get_command_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_command_complete_get_command_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[d0]"></a>hci_event_le_meta_get_subevent_code</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_le_meta_get_subevent_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_le_meta_get_subevent_code
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[cd]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[d2]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[8c]"></a>ing2p4g_switch_to_ble_mode_complete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, profile.o(.text.ing2p4g_switch_to_ble_mode_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ing2p4g_switch_to_ble_mode_complete &rArr; setup_adv &rArr; ble_adv_set &rArr; ble_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_reset_handler
</UL>

<P><STRONG><a name="[bd]"></a>setup_adv</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, profile.o(.text.setup_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = setup_adv &rArr; ble_adv_set &rArr; ble_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_ble_mode_complete
</UL>

<P><STRONG><a name="[d3]"></a>user_msg_handler</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[e]"></a>user_packet_handler</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = user_packet_handler &rArr; ble_adv_set_complete_handler &rArr; ble_adv_stopped_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_le_meta_get_subevent_code
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_clear
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_reset_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set_complete_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[8]"></a>EventIrqCallBack</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, test_2p4g.o(.text.EventIrqCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventIrqCallBack &rArr; ing2p4g_start_2p4g_tx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_rx_data
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_2g4_work_mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_event_int
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percent_cnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_2p4g.o(.text.ing24g_test_init)
</UL>
<P><STRONG><a name="[9]"></a>RxPktIrqCallBack</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test_2p4g.o(.text.RxPktIrqCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RxPktIrqCallBack &rArr; ing2p4g_clear_rx_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_rx_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_2p4g.o(.text.ing24g_test_init)
</UL>
<P><STRONG><a name="[a]"></a>TxPktIrqCallBack</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test_2p4g.o(.text.TxPktIrqCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TxPktIrqCallBack &rArr; ing2p4g_clear_tx_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_tx_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_2p4g.o(.text.ing24g_test_init)
</UL>
<P><STRONG><a name="[91]"></a>ble_switch_to_ble_trigger</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, test_2p4g.o(.text.ble_switch_to_ble_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_switch_to_ble_trigger &rArr; ing24g_test_do_switch_to_BLE &rArr; ing2p4g_switch_to_BLE &rArr; comm_2p4g_stop &rArr; LLE_SPI_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_state
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_trigger
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_BLE
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_switch_mode_callback
</UL>

<P><STRONG><a name="[4d]"></a>percent_cnt</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, test_2p4g.o(.text.percent_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = percent_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[7d]"></a>append_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uart_console.o(.text.append_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_data
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_rx_data
</UL>

<P><STRONG><a name="[f]"></a>console_task_entry</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_console.o(.text.console_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = console_task_entry &rArr; handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.text.uart_console_start)
</UL>
<P><STRONG><a name="[9b]"></a>tx_data</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart_console.o(.text.tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_data &rArr; puts &rArr; fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
</UL>

<P><STRONG><a name="[1]"></a>Override_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>copy_security_data</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, eflash.o(.text.copy_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = copy_security_data &rArr; read_flash_security
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[b1]"></a>is_data_ready</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, eflash.o(.text.is_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[c0]"></a>security_page_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eflash.o(.text.security_page_read))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[51]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupB
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupA
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_DebounceEn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[50]"></a>map_int_mode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.map_int_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map_int_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[5a]"></a>set_reg_bits</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[59]"></a>source_id_on_pin</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[68]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[6a]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[6d]"></a>set_reg_bits</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
</UL>

<P><STRONG><a name="[62]"></a>_DoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[60]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
</UL>

<P><STRONG><a name="[66]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[65]"></a>_WriteNoCheck</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[57]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ing_2p4g.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[31]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ing_2p4g.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
</UL>

<P><STRONG><a name="[32]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ing_2p4g.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[a6]"></a>ing2p4g_rst</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[d8]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d7]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[db]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[da]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
